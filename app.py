from flask import Flask, render_template, request, jsonify
import hashlib
from os import mkdir
from subprocess import Popen, PIPE

class App:
    def __init__(self):
        self.app = Flask(__name__)
    
    def routes(self):
        @self.app.route("/")
        def index():
            return render_template('index.html')
        
        @self.app.route('/result', methods = ['GET', 'POST'])
        def upload_file():
            if request.method == 'POST':
                # Get the file
                f = request.files['file']
                global r
                r = f.read()

                # Get the MD5 of it
                h = hashlib.md5()
                h.update(r)
                
                # Save the file
                try:
                    mkdir("env/" + h.hexdigest())
                    with open("env/" + h.hexdigest() + "/" + f.filename, "wb") as file:
                        file.write(r)
                        file.close()
                        
                except FileExistsError: pass

                # Execute Spigot Anti-Malware
                cmd = Popen("cd env/ && java -jar MCAntiMalware.jar --singleScan true --scanFile " + h.hexdigest() + "/" + f.filename, shell=True, stdout=PIPE, stderr=PIPE).communicate()[0]
                
                # Handle the results
                result = {"warnings": [], "detections": []}
                for line in str(cmd).split("\\n"):
                    if "[WARNING]" in line: result["warnings"].append(line.split("[WARNING]")[1])
                    elif "[DETECTED]" in line: result["detections"].append(line.split("[DETECTED]")[1])
                

                return jsonify(result)
            else: return "Invalid upload request."

if __name__ == '__main__':
    instance = App()
    instance.routes()
    instance.app.run()